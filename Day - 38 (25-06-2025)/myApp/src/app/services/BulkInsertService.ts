{
  "version": 3,
  "sources": ["src/app/product/product.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { Product } from './product';\nimport { ProductModel } from '../models/product';\nimport { Component } from '@angular/core';\nimport { ProductService } from '../services/product.service';\nimport { CurrencyPipe } from '@angular/common';\nimport { ActivatedRoute } from '@angular/router';\nimport { provideHttpClient } from '@angular/common/http';\nimport { provideHttpClientTesting } from '@angular/common/http/testing';\n\nclass MockProductService{\n  getProduct(id:number){\n    return{subscribe:()=>{}}\n  }\n}\n\nconst mockActivatedRoute = {\n  snapshot:{\n    paramMap:{\n      get:(key:string)=>{\n        if(key=='id') return '1';\n        return null;\n      }\n    }\n  }\n\n}\n@Component({\n  standalone:true,\n  imports:[Product],\n  template:`<app-product [product]=product (addToCart)=\"onAdd($event)\"></app-product>`\n})\nclass HostComponent{\n  product = new ProductModel();\n  addedProductId:number |null = null;\n  onAdd(pid:number){\n    this.addedProductId = pid;\n  }\n}\n\n\n\ndescribe('Product', () => {\n  let component: Product;\n  let fixture: ComponentFixture<HostComponent>;\n  let hostComponent:HostComponent;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [HostComponent],\n      providers:[{provide:ProductService,useClass:MockProductService},\n      {provide:ActivatedRoute,useValue:mockActivatedRoute},\n     provideHttpClient(),provideHttpClientTesting(),\n      CurrencyPipe,\n      ]}).compileComponents();\n      fixture = TestBed.createComponent(HostComponent);\n      hostComponent = fixture.componentInstance;\n      fixture.detectChanges();\n  });\n\n   it('check render product object input',()=>{\n    hostComponent.product = {\n      id:1,\n      title:'Abc',\n      price:90,\n      description:'blah blah',\n    } as ProductModel;\n     fixture.detectChanges();\n     const compiled = fixture.nativeElement as HTMLElement;\n     expect(compiled.textContent).toContain('Abc');\n    })\n\n});\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA,IAAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAAC;AAEA,QAAM,qBAAN,MAAwB;MACtB,WAAW,IAAS;AAClB,eAAM,EAAC,WAAU,MAAI;QAAC,EAAC;MACzB;;AAGF,QAAM,qBAAqB;MACzB,UAAS;QACP,UAAS;UACP,KAAI,CAAC,QAAa;AAChB,gBAAG,OAAK;AAAM,qBAAO;AACrB,mBAAO;UACT;;;;AAUN,QAAM,gBAAN,MAAM,cAAa;MACjB,UAAU,IAAI,aAAY;MAC1B,iBAA8B;MAC9B,MAAM,KAAU;AACd,aAAK,iBAAiB;MACxB;;AALI,oBAAa,WAAA;MALlB,UAAU;QACT,YAAW;QACX,SAAQ,CAAC,OAAO;QAChB,UAAS;OACV;OACK,aAAa;AAUnB,aAAS,WAAW,MAAK;AACvB,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,aAAa;UACvB,WAAU;YAAC,EAAC,SAAQ,gBAAe,UAAS,mBAAkB;YAC9D,EAAC,SAAQ,gBAAe,UAAS,mBAAkB;YACpD,kBAAiB;YAAG,yBAAwB;YAC3C;;SACE,EAAE,kBAAiB;AACrB,kBAAU,QAAQ,gBAAgB,aAAa;AAC/C,wBAAgB,QAAQ;AACxB,gBAAQ,cAAa;MACzB,EAAC;AAEA,SAAG,qCAAoC,MAAI;AAC1C,sBAAc,UAAU;UACtB,IAAG;UACH,OAAM;UACN,OAAM;UACN,aAAY;;AAEb,gBAAQ,cAAa;AACrB,cAAM,WAAW,QAAQ;AACzB,eAAO,SAAS,WAAW,EAAE,UAAU,KAAK;MAC7C,CAAC;IAEL,CAAC;;;",
  "names": ["init_product", "init_testing"]
}
